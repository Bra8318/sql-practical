CREATE DATABASE STUDENT_SOCIETY;
USE STUDENT_SOCIETY;
CREATE TABLE STUDENT(
ROLL_NO CHAR(6) , STUDENT_NAME VARCHAR(20),
COURSE VARCHAR(20),DOB DATE ,
PRIMARY KEY (ROLL_NO));
CREATE TABLE SOCIETY(
SID CHAR(6), SOC_NAME VARCHAR(20),
MENTOR_NAME VARCHAR(15),TOTAL_SEATS INT UNSIGNED,
PRIMARY KEY (SID));
CREATE TABLE ENROLLMENT(
ROLL_NO CHAR(6), SID CHAR (6),
DATE_OF_ENROLLMENT DATE,
FOREIGN KEY(ROLL_NO) REFERENCES STUDENT(ROLL_NO),
FOREIGN KEY (SID) REFERENCES SOCIETY(SID));
SHOW TABLES;
DESCRIBE STUDENT;
INSERT INTO STUDENT VALUES
('A1' ,'AMIT','COMPUT.SCI','2000-02-10'),
('A2','ASHISH','CHEMISTRY','2001-03-01'),
('A3','ASHWANI','COMPUT.SCI','2000-03-05'),
('A4','RAJ','BCOM','2002-03-14'),
('A5','ASHWANI' ,'CHEMISTRY','2003-05-25'),
('A6','NAREN','BSC','2005-05-10');
SELECT * FROM STUDENT;
DESCRIBE SOCIETY;
INSERT INTO SOCIETY VALUES
('S1','NSS','RAM',50),
('S2','CIVIC','RAJAN',60),
('S3','TATVA','GOMESH',40),
('S4','CULTURAL','KRISHNA',60);
SELECT * FROM SOCIETY;
DESCRIBE ENROLLMENT;
INSERT INTO ENROLLMENT VALUES
('A1','S1','2023-07-10'),
('A2','S1','2023-07-10'),
('A3','S1','2023-07-10'),
('A4','S1','2023-07-10'),
('A5','S1','2023-07-10'),
('A2','S2','2023-08-02'),
('A4','S2','2023-08-02'),
('A5','S2','2023-08-02'),
('A6','S2','2023-08-02'),
('A1','S3','2023-08-10'),
('A2','S3','2023-08-10'),
('A3','S3','2023-08-10'),
('A5','S3','2023-08-10'),
('A6','S3','2023-08-10'),
('A1','S4','2023-08-25'),
('A2','S4','2023-08-25'),
('A3','S4','2023-08-25'),
('A4','S4','2023-08-25'),
('A5','S4','2023-08-25'),
('A6','S4','2023-08-25');
SELECT *FROM ENROLLMENT;
INSERT INTO STUDENT VALUES
("X12","RAJESH","BVOC","2005-01-06"),
("X19","VIKRAM","BCOM","2004-06-15"),
("Z09","MOHAN","CHEMISTRY","2003-08-19"),
("Z29","DEV","COMPUT.SCI","2002-05-04");
INSERT INTO ENROLLMENT (ROLL_NO,SID,DATE_OF_ENROLLMENT) VALUES
('A10','S6','2023-05-01'),
('A9','S6','2023-05-01'),
('A8','S7','2022-10-25'),
('X12','S7','2022-10-25');
#('X12','S5','2022-07-10'),
#('A11','S8','2023-05-01'),
#('A10','S9','2022-10-25');

USE STUDENT_SOCIETY;
#1. Retrieve names of students enrolled in any society.
SELECT DISTINCT STUDENT_NAME FROM STUDENT a,SOCIETY b, ENROLLMENT c
WHERE a.ROLL_NO = c.ROLL_NO AND
c.SID = B.SID;

#2. Retrieve all society names.
SELECT SOC_NAME FROM SOCIETY;

#3. Retrieve students' names starting with letter ‘A’.
SELECT DISTINCT STUDENT_NAME FROM STUDENT 
WHERE STUDENT_NAME LIKE "A%";

#4. Retrieve students' details studying in courses ‘computer science’ or ‘chemistry’.
SELECT * FROM STUDENT
WHERE COURSE IN ("CHEMISTRY" , "COMPUT.SCI");

#5. Retrieve students’ names whose roll no either starts with ‘X’ or ‘Z’ and ends with ‘9’
SELECT STUDENT_NAME,ROLL_NO FROM STUDENT
WHERE ROLL_NO LIKE "X%9" OR ROLL_NO LIKE "Z%9";

#6. Find society details with more than N TotalSeats where N is to be input by the user
SET @N = 10;
SELECT * FROM SOCIETY 
WHERE TOTAL_SEATS > @N;

#7. Update society table for mentor name of a specific society
UPDATE SOCIETY
SET MENTOR_NAME = "PRAKHAR"
WHERE SID = "S2";
SELECT * FROM SOCIETY;

#8. Find society names in which more than five students have enrolled
SELECT SOCIETY.SOC_NAME,COUNT(ENROLLMENT.ROLL_NO) AS TOTAL_ENROLLED_STUDENT FROM ENROLLMENT
LEFT JOIN SOCIETY USING (SID)
GROUP BY SID 
HAVING TOTAL_ENROLLED_STUDENT >5 ;

#9. Find the name of youngest student enrolled in society ‘NSS’
ALTER TABLE STUDENT
ADD AGE INT;
SET SQL_SAFE_UPDATES = 0;
UPDATE STUDENT
SET AGE = DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(),DOB)),'%Y')+0;
SELECT * FROM STUDENT;

SELECT STUDENT_NAME,STUDENT.AGE FROM STUDENT
INNER JOIN ENROLLMENT ON STUDENT.ROLL_NO = ENROLLMENT.ROLL_NO 
INNER JOIN SOCIETY ON SOCIETY.SID = ENROLLMENT.SID
WHERE SOCIETY.SOC_NAME = "NSS"
GROUP BY STUDENT.STUDENT_NAME,STUDENT.AGE
HAVING STUDENT.AGE = (SELECT MIN(AGE) FROM STUDENT WHERE ROLL_NO IN
(SELECT ROLL_NO FROM ENROLLMENT 
INNER JOIN SOCIETY USING (SID )
WHERE SOCIETY.SOC_NAME = "NSS"));

#10. Find the name of most popular society (on the basis of enrolled students)
SELECT SOC_NAME ,COUNT(*) AS COUNT FROM ENROLLMENT
RIGHT JOIN SOCIETY USING(SID)
GROUP BY SID
ORDER BY COUNT DESC
LIMIT 1;

#11. Find the name of two least popular societies (on the basis of enrolled students)
SELECT SOC_NAME ,COUNT(*) AS COUNT FROM ENROLLMENT
RIGHT JOIN SOCIETY USING(SID)
GROUP BY SID
ORDER BY COUNT ASC
LIMIT 2;

#12. Find the student names who are not enrolled in any society
SELECT STUDENT_NAME FROM STUDENT
WHERE ROLL_NO NOT IN (SELECT ROLL_NO FROM ENROLLMENT);

#13. Find the student names enrolled in at least two societies
SELECT DISTINCT STUDENT.STUDENT_NAME FROM STUDENT
INNER JOIN ENROLLMENT USING (ROLL_NO)
INNER JOIN SOCIETY USING (SID)
GROUP BY STUDENT.ROLL_NO
HAVING COUNT(SOCIETY.SID) >= 2;

#14. Find society names in which maximum students are enrolled
SELECT SOCIETY.SOC_NAME ,COUNT(ENROLLMENT.ROLL_NO) AS TOTAL_ENROLLED_STUDENT FROM ENROLLMENT
LEFT JOIN SOCIETY USING (SID)
GROUP BY SOC_NAME
HAVING TOTAL_ENROLLED_STUDENT=( SELECT MAX(ENROLLED_STUDENT)
 FROM (SELECT COUNT(ENROLLMENT.ROLL_NO) AS ENROLLED_STUDENT FROM ENROLLMENT
 GROUP BY SID ) AS MAX_ENROLLED);

#15.Find names of all students who have enrolled in any society
# and society names in which at least one student has enrolled
SELECT DISTINCT STUDENT_NAME FROM STUDENT,ENROLLMENT,SOCIETY
WHERE STUDENT.ROLL_NO = ENROLLMENT.ROLL_NO AND 
SOCIETY.SID = ENROLLMENT.SID;
SELECT SOC_NAME,COUNT(ENROLLMENT.ROLL_NO) AS TOTAL_STUDENT FROM SOCIETY
INNER JOIN ENROLLMENT USING(SID)
INNER JOIN STUDENT USING (ROLL_NO)
GROUP BY SOC_NAME
HAVING COUNT(ENROLLMENT.ROLL_NO) >=1;

#16. Find names of students who are enrolled in any of the three societies
# ‘Debating’, ‘Dance’ and ‘Sashakt.’
SELECT DISTINCT STUDENT.STUDENT_NAME FROM STUDENT
LEFT JOIN ENROLLMENT USING(ROLL_NO)
LEFT JOIN SOCIETY ON SOCIETY.SID = ENROLLMENT.SID
GROUP BY STUDENT_NAME,SOCIETY.SOC_NAME
HAVING SOC_NAME IN ('DEBATING','DANCE',' SASHAKT'); 
#WHERE SOC_NAME = 'DEBATING' OR SOC_NAME= 'DANCE' OR SOC_NAME='SASHAKT');

#17. Find society names such that its mentor has a name with ‘Gupta’ in it.
SELECT SOCIETY.SOC_NAME FROM SOCIETY
WHERE MENTOR_NAME  LIKE "%GUPTA";

#18. Find the society names in which the number of enrolled students is only 10% of its capacity.
SELECT SOC_NAME,TOTAL_SEATS,COUNT(ENROLLMENT.ROLL_NO) AS TOTAL_STUDENT FROM ENROLLMENT 
INNER JOIN SOCIETY USING(SID)
GROUP BY SID
HAVING TOTAL_STUDENT = 0.1 * TOTAL_SEATS;

USE STUDENT_SOCIETY;

#19. Display the vacant seats for each society.
SELECT SOC_NAME,(TOTAL_SEATS -COUNT(ENROLLMENT.ROLL_NO)) AS VACANT_SEATS FROM SOCIETY
INNER JOIN ENROLLMENT USING(SID)
GROUP BY SID;

#20. Increment Total Seats of each society by 10%
SELECT SOC_NAME,ROUND(TOTAL_SEATS + 0.1 * TOTAL_SEATS) AS INCREMENTED_SEAT FROM SOCIETY;
#SELECT SOC_NAME,ROUND(TOTAL_SEATS * 1.1) AS INCREMENTED_SEAT FROM SOCIETY;

#21. Add enrollment fees paid (‘yes’/’No’) field in the enrollment table.
ALTER TABLE ENROLLMENT
ADD COLUMN FEES_PAID_STATUS ENUM("YES","NO") DEFAULT("NO") ;
SELECT * FROM enrollment;
UPDATE ENROLLMENT 
SET FEES_PAID_STATUS = "YES"
WHERE ROLL_NO IN ( "A1","A5","A10","X12");

#22. Update date of enrollment of society id ‘s1’ to ‘2018-01-15’,
# ‘s2’ to current date and ‘s3’ to ‘2018-01-02’
UPDATE ENROLLMENT
SET DATE_OF_ENROLLMENT = "2018-01-15"
WHERE SID = "S1";

UPDATE ENROLLMENT
SET DATE_OF_ENROLLMENT = now()
WHERE SID = "S2";

UPDATE ENROLLMENT
SET DATE_OF_ENROLLMENT = "2018-01-02"
WHERE SID = "S3";
SELECT * FROM enrollment;

#23. Create a view to keep track of society names with the total number of students enrolled in it.
CREATE VIEW SOCIETY_NAMES AS
SELECT SOC_NAME , COUNT(ENROLLMENT.ROLL_NO) AS ENROLLED_STUDENTS FROM SOCIETY
LEFT JOIN ENROLLMENT USING (SID)
GROUP BY SID;
SELECT * FROM SOCIETY_NAMES ;

#24. Find student names enrolled in all the societies.
SELECT DISTINCT STUDENT_NAME FROM STUDENT,SOCIETY ,ENROLLMENT 
WHERE ENROLLMENT.ROLL_NO =STUDENT.ROLL_NO AND
ENROLLMENT.SID = SOCIETY.SID
GROUP BY STUDENT.STUDENT_NAME,SOCIETY.SID
HAVING COUNT(SOCIETY.SID) = COUNT(ENROLLMENT.ROLL_NO);

#25. Count number of societies with more than 5 student enrolled in it
SELECT COUNT(SOC_NAME) FROM SOCIETY_NAMES
WHERE ENROLLED_STUDENTS > 5 ;

#26. Add column Mobile number in student table with default value ‘9999999999’
ALTER TABLE STUDENT 
ADD COLUMN MOBILE_NO DOUBLE DEFAULT ( "9999999999");
SELECT * FROM STUDENT;

#27. Find the total number of students whose age is > 20 years.
SELECT  COUNT(ROLL_NO) AS TOTAL FROM STUDENT
WHERE AGE > 20; 

#28. Find names of students who are born in 2001 and are enrolled in at least one society.
SELECT DISTINCT STUDENT_NAME,ROLL_NO  FROM STUDENT 
LEFT JOIN ENROLLMENT USING(ROLL_NO)
WHERE DOB LIKE "2001%";

#29. Count all societies whose name starts with ‘S’ and ends with‘t’ and
# at least 5 students are enrolled in the society
SELECT DISPLAY.SOC_NAME,DISPLAY.TOTAL_ENROLLED FROM DISPLAY
WHERE SOC_NAME LIKE "S%T" AND TOTAL_ENROLLED >= 2;

#30. Display the following information:
#Society name, Mentor name, Total Capacity, Total Enrolled, Unfilled Seats
CREATE VIEW DISPLAY AS
SELECT SOCIETY.SOC_NAME,SOCIETY.MENTOR_NAME,SOCIETY.TOTAL_SEATS ,
COUNT(ENROLLMENT.ROLL_NO) AS TOTAL_ENROLLED,
TOTAL_SEATS - COUNT(ENROLLMENT.ROLL_NO) AS UNFILLED_SEATS FROM SOCIETY
INNER JOIN ENROLLMENT USING(SID)
GROUP BY SID;
 SELECT * FROM DISPLAY;







SELECT STUDENT.ROLL_NO , SOCIETY.SID 
FROM STUDENT
INNER JOIN SOCIETY;
ALTER TABLE ENROLLMENT
ADD COLUMN TOTAL_ENROLLED_STUDENT INT;

SELECT COURSE,STUDENT_NAME,SOC_NAME,DATE_OF_ENROLLMENT,AGE FROM STUDENT,SOCIETY,ENROLLMENT
WHERE STUDENT.ROLL_NO = ENROLLMENT.ROLL_NO AND
ENROLLMENT.SID = SOCIETY.SID;









